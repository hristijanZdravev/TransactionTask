// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransactionTask.Data;

#nullable disable

namespace TransactionTask.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250731123941_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FeeCalculationHistoryFeeRule", b =>
                {
                    b.Property<int>("FeeCalculationHistoriesId")
                        .HasColumnType("int");

                    b.Property<int>("FeeRulesId")
                        .HasColumnType("int");

                    b.HasKey("FeeCalculationHistoriesId", "FeeRulesId");

                    b.HasIndex("FeeRulesId");

                    b.ToTable("FeeRuleHistories", (string)null);
                });

            modelBuilder.Entity("TransactionTask.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientSegmentId")
                        .HasColumnType("int");

                    b.Property<int>("CreditScore")
                        .HasColumnType("int");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientSegmentId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientSegmentId = 1,
                            CreditScore = 400,
                            RiskLevel = 1
                        },
                        new
                        {
                            Id = 2,
                            ClientSegmentId = 1,
                            CreditScore = 400,
                            RiskLevel = 1
                        });
                });

            modelBuilder.Entity("TransactionTask.Models.ClientSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ClientSegments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Regular"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Trusted"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Premium"
                        });
                });

            modelBuilder.Entity("TransactionTask.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "EUR"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MKD"
                        },
                        new
                        {
                            Id = 3,
                            Name = "USD"
                        });
                });

            modelBuilder.Entity("TransactionTask.Models.FeeCalculationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CalculatedFee")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("FeeCalculationHistories");
                });

            modelBuilder.Entity("TransactionTask.Models.FeeRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CalculationExpression")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionExpression")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<double?>("MaxFee")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FeeRules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CalculationExpression = "0.20",
                            ConditionExpression = "Type == 'POS' && Amount <= 100",
                            Name = "POS under 100€ – Fixed"
                        },
                        new
                        {
                            Id = 2,
                            CalculationExpression = "Amount * 0.002",
                            ConditionExpression = "Type == 'POS' && Amount > 100",
                            Name = "POS over 100€ – Percentage"
                        },
                        new
                        {
                            Id = 3,
                            CalculationExpression = "Amount * 0.018 + 0.15",
                            ConditionExpression = "Type == 'e-commerce'",
                            MaxFee = 120.0,
                            Name = "E-Commerce – Percent + Fixed"
                        },
                        new
                        {
                            Id = 4,
                            CalculationExpression = "0",
                            ConditionExpression = "CreditScore > 400",
                            DiscountPercent = 1.0,
                            Name = "High Credit Score – Discount"
                        });
                });

            modelBuilder.Entity("TransactionTask.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDomestic")
                        .HasColumnType("bit");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TransactionTask.Models.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "POS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "e-commerce"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ATM"
                        });
                });

            modelBuilder.Entity("FeeCalculationHistoryFeeRule", b =>
                {
                    b.HasOne("TransactionTask.Models.FeeCalculationHistory", null)
                        .WithMany()
                        .HasForeignKey("FeeCalculationHistoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransactionTask.Models.FeeRule", null)
                        .WithMany()
                        .HasForeignKey("FeeRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransactionTask.Models.Client", b =>
                {
                    b.HasOne("TransactionTask.Models.ClientSegment", "ClientSegment")
                        .WithMany()
                        .HasForeignKey("ClientSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientSegment");
                });

            modelBuilder.Entity("TransactionTask.Models.FeeCalculationHistory", b =>
                {
                    b.HasOne("TransactionTask.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("TransactionTask.Models.Transaction", b =>
                {
                    b.HasOne("TransactionTask.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransactionTask.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransactionTask.Models.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Currency");

                    b.Navigation("TransactionType");
                });
#pragma warning restore 612, 618
        }
    }
}
